<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
        xml:id="asm_ftoi">
    <?dbhtml dir="a-z/conversions" ?>
<sect1>
    <title>FTOI</title>
    <informaltable tabstyle="stack" frame='all' pgwide="0">
        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
            <colspec colname='c1'/>
            <colspec colname='c2'/>
3           <thead>
                <row>
                    <entry namest="c1" nameend="c2">VM Stack</entry>
                </row>
                <row>
                    <entry>Before</entry>
                    <entry>After</entry>
                </row>
            </thead>
             <tbody>
                 <row>
                     <entry/>
                     <entry/>
                 </row>
                <row>
                    <entry><emphasis role="args">float value</emphasis></entry>
                    <entry><emphasis role="args">uint32 value</emphasis></entry>
                </row>
            </tbody>
        </tgroup>
    </informaltable>
    <abstract>
        <para>
        Pop the float from the stack and push a uint32 (unsigned short) with the same value.
        </para>
        <note>
        <para>
        It is assumed that the programmer understands the possibility of overflow in this situation. This instruction is
        a necessary part of the language specification, but there is little that can be done in the assembler to mitigate
        the possibility. The programmer is responsible for ensuring that values are within the range that
        can be represented by the narrower data type. The following discussion assumes no loss of data due to
        overflow.
        </para>

            <para>
        What is placed on the stack is an unsigned int, but the float removed from the stack is first cast to a signed
        int (int32) so, assuming no overflow, the sign bit of the value will be extended to the full width of the
        int.
        The fact that it is then pushed (cast) as an unsigned int makes no difference to its contents. If it is
        later interpreted as an int32 (ie. cast as an int32 when popped off the stack) then the original signed value
        will be returned.
            </para>
            <para>
            This is why there are not separate instructions for converting to signed values and to unsigned values. To
            have these would use up a large number of the base VM op-codes for no benefit. It is arguable that the name
            of the instruction should have been <command>ftoui</command>, as this reflects the literal truth, but it
            would also be misleading because it suggests that sign is lost. Treat the 'i' as a generic abbreviation
            for int, signed or otherwise.
            </para>

        </note>
    </abstract>
    <sect2>
        <title>Synopsis</title>
        <funcsynopsis>
            <para><emphasis role="args">&lt;float&gt;</emphasis>&#160;&#160;&#160;&#160;<emphasis role="args">&lt;value&gt;</emphasis></para>
            <para><command>ftoi</command></para>
        </funcsynopsis>
    </sect2>
    <sect2>
        <title>Where</title>
        <para><emphasis role="args">&lt;value&gt;</emphasis> - the float value to be converted</para>
        <note>This synopsis shows an immediate value being explicitly placed onto the stack to be converted.
            However, the value could be the result peripheral I/O, function calls or any number of mathematical
            expressions. Or it could be an arbitrary combination of all of these.</note>
    </sect2>
    <sect2>
        <title>Returns</title>
        <para>Returns a uint32 with the value of <emphasis role="args">&lt;value&gt;</emphasis>
            (by virtue of it being pushed onto the stack). It can be treated as an int32 by subsequent code.</para>
    </sect2>
    <sect2>
        <title>Example</title>
        <programlisting>
        ...
        float   -42
        ftoi
        withint32    ; treat everything as an int32 (signed)
        tostr       ; convert signed value to a string ("-42")
        withstring
        send        ; send "-42" to the default stream
        ...
        </programlisting>
    </sect2>
    <sect2>
        <title>See Also</title>
        <para>
            <olink targetptr="asm_btos">btos</olink>
            <olink targetptr="asm_btoi">btoi</olink>
            <olink targetptr="asm_btof">btof</olink>
            <olink targetptr="asm_btod">btod</olink>
            <olink targetptr="asm_ubtos">ubtos</olink>
            <olink targetptr="asm_ubtoi">ubtoi</olink>
            <olink targetptr="asm_ubtof">ubtof</olink>
            <olink targetptr="asm_ubtod">ubtod</olink>
            <olink targetptr="asm_stob">stob</olink>
            <olink targetptr="asm_stoi">stoi</olink>
            <olink targetptr="asm_stof">stof</olink>
            <olink targetptr="asm_stod">stod</olink>
            <olink targetptr="asm_ustob">ustob</olink>
            <olink targetptr="asm_ustoi">ustoi</olink>
            <olink targetptr="asm_ustof">ustof</olink>
            <olink targetptr="asm_ustod">ustod</olink>
            <olink targetptr="asm_itob">itob</olink>
            <olink targetptr="asm_itos">itos</olink>
            <olink targetptr="asm_itof">itof</olink>
            <olink targetptr="asm_itod">itod</olink>
            <olink targetptr="asm_uitob">uitob</olink>
            <olink targetptr="asm_uitos">uitos</olink>
            <olink targetptr="asm_uitof">uitof</olink>
            <olink targetptr="asm_uitod">uitod</olink>
            <olink targetptr="asm_ftob">ftob</olink>
            <olink targetptr="asm_ftod">ftod</olink>
            <olink targetptr="asm_dtob">dtob</olink>
            <olink targetptr="asm_dtos">dtos</olink>
            <olink targetptr="asm_dtoi">dtoi</olink>
            <olink targetptr="asm_dtof">dtof</olink>
        </para>
    </sect2>
</sect1>
</article>
