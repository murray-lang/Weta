/~
   /*
   Copyright 2014 Murray Lang

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.	
   
   The format of this file is as specified for JS/CC: 
		http://jscc.phorward-software.com/
   Kudos to Jan Max Meyer for providing such a useful tool free of charge.

   This file describes a parser for an assembly language based on the byte
   codes of the Babuino Virtual Machine. These codes are based on Cricket
   Logo, but are more comprehensive.
   */
~/
	
	
[*

//--------------------------------------------------------------------------
// My stuff

AST               = require('../../../common/Ast');
InstructionNode   = require('../../../assembler/AstNodes/InstructionNode');


var _ast = new AST.AbstractSyntaxTree();
var lib = "io.";
*]

!	' |\r|\t'

	"\n|;[^\n]*\n"        NL
    "io"                                [* %match = { value: %match, token: %match, offset: %offset}; *]
    "din\.config"         DinConfig     [* %match = { value: lib + %match, token: %match, offset: %offset}; *]
    ;
##

Program:		Program Stmt 		[*  if (%2 !== undefined && %2 != null)
                                                {
                                                    _ast.appendNode(%2);
                                                }
                                            *]
				|
				;

Stmt:	        UnaryInstr NL		    	[* %% = new InstructionNode(%1); *]
                | NL                        [* *]
				;

UnaryInstr:     DinConfig
                ;

[*
module.exports.parse = __IoAsmCCparse;
module.exports.ast   = _ast;
*]
