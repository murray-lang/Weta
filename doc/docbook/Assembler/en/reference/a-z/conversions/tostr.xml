<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
        xml:id="asm_tostr">
    <?dbhtml dir="a-z" ?>
<sect1>
    <title>TOSTR</title>
    <informaltable tabstyle="stack" frame='all' pgwide="0">
        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
            <colspec colname='c1'/>
            <colspec colname='c2'/>
3           <thead>
                <row>
                    <entry namest="c1" nameend="c2">VM Stack</entry>
                </row>
                <row>
                    <entry>Before</entry>
                    <entry>After</entry>
                </row>
            </thead>
             <tbody>
                 <row>
                     <entry/>
                     <entry/>
                 </row>
                <row>
                    <entry><emphasis role="args">binary</emphasis></entry>
                    <entry><emphasis role="args">text</emphasis></entry>
                </row>
            </tbody>
        </tgroup>
    </informaltable>
    <abstract>
        <para>
        Use the most recent <command>with<emphasis>&lt;type&gt;</emphasis></command> selection to pop the top value
        from the stack, and push its string representation onto the stack in its place.
        </para>
        <para>
            If the current <command>with<emphasis>&lt;type&gt;</emphasis></command> selection is
        <command>withstring</command>, then <command>tostr</command> does nothing. (That is, it will not waste resources
        converting a string to a string.)
        </para>
    </abstract>
    <sect2>
        <title>Synopsis</title>
        <funcsynopsis>
            <para>with<emphasis>&lt;type&gt;</emphasis></para>
            <para><emphasis role="args">&lt;type&gt;</emphasis>&#160;&#160;&#160;&#160;<emphasis role="args">&lt;value&gt;</emphasis></para>
            <para><command>tostr</command></para>
        </funcsynopsis>
    </sect2>
    <sect2>
        <title>Where</title>
        <para><emphasis role="args">&lt;type&gt;</emphasis> - the type of data on the stack before calling <command>tostr</command></para>
        <para><emphasis role="args">&lt;value&gt;</emphasis> - a value on the stack to be converted</para>
        <note>This synposis shows an immediate value being explicity placed onto the stack to be converted.
            However, the value could be the result peripheral I/O, function calls or any number of mathematical
            expressions. It could also be an arbitrary combination of all of these.</note>
    </sect2>
    <sect2>
        <title>Returns</title>
        <para>Returns a string representation of <emphasis role="args">&lt;value&gt;</emphasis>
            (by virtue of it being pushed onto the stack)</para>
    </sect2>
    <sect2>
        <title>Example</title>
        <programlisting>
        .global _start
        .data
    foo:	.short  0
    bar:    .ptr    0
        .text
        ...
        ; Play with indirection. Foo will be accessed indirectly using pointer bar
        withint16
        sensor1         ; get the (int16) value from sensor1
        global   foo    ; get the address of foo
        set             ; store the sensor value in foo (uses withint16 setting)
        global foo      ; get the address of foo again
        global bar      ; get the address of bar
        withptr         ; operate on pointers now
        set             ; assign the address of foo to bar (uses withptr setting)
        global bar
        get             ; get the address of foo (uses withptr setting)
        withint16       ; With the pointer on the stack, we can switch to operating on int16
        get             ; get the int16 contents of foo (via its address from bar - uses withint16 setting)
        tostr           ; convert the value to a string (uses withint16 setting)
        withstring      ; working with strings now
        send            ; send the string to the default stream (uses withstring setting)
        ...
        exit
        .end
        </programlisting>
    </sect2>
    <sect2>
        <title>See Also</title>
        <para>
            <olink targetptr="asm_withbool">withbool</olink>
            <olink targetptr="asm_withint8">withint8</olink> <olink targetptr="asm_withuint8">withuint8</olink>
            <olink targetptr="asm_withint16">withint16</olink> <olink targetptr="asm_withuint16">withuint16</olink>
            <olink targetptr="asm_withint32">withint32</olink> <olink targetptr="asm_withuint32">withuint32</olink>
            <olink targetptr="asm_withfloat">withfloat</olink> <olink targetptr="asm_withdouble">withdouble</olink>
            <olink targetptr="asm_withstring">withptr</olink>
        </para>
    </sect2>
</sect1>
</article>
